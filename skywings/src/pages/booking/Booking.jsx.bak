import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { useForm } from 'react-hook-form';
import { format } from 'date-fns';
import { ArrowLeft, Loader2, User, Plane, MapPin, Clock } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent } from '@/components/ui/tabs';
import { toast } from '@/components/ui/use-toast';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';
import { Separator } from '@/components/ui/separator';
import { flightService } from '@/services/flightService';
import { useAuth } from '@/hooks/useAuth';
import { useToast } from '@/components/ui/use-toast';
import Payment from './components/Payment';
import BookingSummary from './components/BookingSummary';

// Form validation schemas
const passengerSchema = z.object({
  firstName: z.string().min(2, 'First name must be at least 2 characters'),
  lastName: z.string().min(2, 'Last name must be at least 2 characters'),
  gender: z.enum(['male', 'female', 'other'], {
    required_error: 'Please select a gender',
  }),
  dateOfBirth: z.string().refine((val) => {
    if (!val) return false;
    const dob = new Date(val);
    const today = new Date();
    return dob < today;
  }, 'Please enter a valid date of birth'),
  passportNumber: z.string().min(5, 'Passport number must be at least 5 characters'),
  nationality: z.string().min(2, 'Please select a nationality'),
});

const contactSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Phone number must be at least 10 digits'),
  address: z.string().min(5, 'Address must be at least 5 characters'),
  city: z.string().min(2, 'City is required'),
  country: z.string().min(2, 'Country is required'),
  postalCode: z.string().min(3, 'Postal code is required'),
});

const Booking = () => {
  const { id: flightId } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { user } = useAuth();
  const [step, setStep] = useState(1);
  const [passengerCount] = useState(1); // Can be dynamic in the future
  const [flight, setFlight] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [bookingData, setBookingData] = useState({
    passengers: [],
    contactInfo: {},
    paymentInfo: {},
  });

  // Initialize forms
  const passengerForm = useForm({
    resolver: zodResolver(passengerSchema),
    defaultValues: {
      firstName: '',
      lastName: '',
      gender: 'male',
      dateOfBirth: '',
      passportNumber: '',
      nationality: 'IN',
    },
  });

  const contactForm = useForm({
    resolver: zodResolver(contactSchema),
    defaultValues: {
      email: user?.email || '',
      phone: user?.phone || '',
      address: '',
      city: '',
      country: 'India',
      postalCode: '',
    },
  });

  // Fetch flight details
  const { data: flightData, isLoading: isFlightLoading } = useQuery({
    queryKey: ['flight', flightId],
    queryFn: () => flightService.getFlightById(flightId),
    enabled: !!flightId,
    onSuccess: (data) => {
      setFlight(data);
      // Initialize passenger form with default values
      passengerForm.reset({
        firstName: user?.firstName || '',
        lastName: user?.lastName || '',
        gender: 'male',
        dateOfBirth: '',
        passportNumber: '',
        nationality: 'IN',
      });
    },
  });

  const onSubmit = (data) => {
    handleSubmit(data).catch(console.error);
  };

  // Handle form navigation
  const nextStep = async () => {
    try {
      let isValid = false;
      
      if (step === 1) {
        isValid = await passengerForm.trigger();
        if (isValid) {
          setBookingData({
            ...bookingData,
            passengers: [passengerForm.getValues()]
          });
        }
      } else if (step === 2) {
        isValid = await contactForm.trigger();
        if (isValid) {
          setBookingData({
            ...bookingData,
            contactInfo: contactForm.getValues()
          });
        }
      }

      if (isValid) {
        setStep(step + 1);
      } else {
        toast({
          title: 'Validation Error',
          description: 'Please fill in all required fields correctly.',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Error in form submission:', error);
      toast({
        title: 'Error',
        description: 'An error occurred while processing your request. Please try again.',
        variant: 'destructive',
      });
    }
  };

  const prevStep = () => {
    setStep(step - 1);
  };

  // Handle payment submission
  const handlePaymentSubmit = async (paymentData) => {
    try {
      setIsSubmitting(true);
      const bookingPayload = {
        ...bookingData,
        paymentInfo: paymentData,
        flightId,
        totalAmount: flight.price + (flight.taxes || 0),
        currency: 'INR',
        bookingReference: `SKY-${Math.floor(100000 + Math.random() * 900000)}`,
      };

      // In a real app, you would call your API here
      console.log('Submitting booking:', bookingPayload);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // On success, navigate to confirmation
      navigate(`/booking/confirmation/${bookingPayload.bookingReference}`);
      
      toast({
        title: 'Booking Confirmed!',
        description: `Your booking reference is ${bookingPayload.bookingReference}. A confirmation has been sent to your email.`,
      });

    } catch (error) {
      console.error('Booking error:', error);
      toast({
        title: 'Booking Failed',
        description: error.message || 'There was an error processing your booking. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Calculate total amount
  const calculateTotal = () => {
    if (!flight) return 0;
    const baseFare = flight.price || 0;
    const taxes = flight.taxes || 0;
    return (baseFare + taxes) * passengerCount;
  };

  // Render step content
  const renderStepContent = () => {
    switch (step) {
      case 1:
        const renderPassengerForm = (index) => {
          return (
            <div className="space-y-4" key={`passenger-form-${index}`}>
              <h3 className="text-lg font-medium">Passenger {index + 1} Details</h3>
              <FormField
                control={passengerForm.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>First Name</FormLabel>
                    <FormControl>
                      <Input placeholder="John" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={passengerForm.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Last Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Doe" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={passengerForm.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select gender" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="male">Male</SelectItem>
                        <SelectItem value="female">Female</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={passengerForm.control}
                name="dateOfBirth"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Date of Birth</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold">Passenger Details</h2>
            <Card>
              <CardContent className="pt-6">
                <form className="space-y-4">
                  {Array.from({ length: passengerCount }, (_, index) => renderPassengerForm(index))}
                          <FormLabel>Last Name</FormLabel>
                          <FormControl>
                            <Input placeholder="Doe" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={passengerForm.control}
                      name="gender"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Gender</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select gender" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="male">Male</SelectItem>
                              <SelectItem value="female">Female</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={passengerForm.control}
                      name="dateOfBirth"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Date of Birth</FormLabel>
                          <FormControl>
                            <Input type="date" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={passengerForm.control}
                      name="passportNumber"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Passport Number</FormLabel>
                          <FormControl>
                            <Input placeholder="A1234567" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={passengerForm.control}
                      name="nationality"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Nationality</FormLabel>
                          <FormControl>
                            <Input placeholder="Country" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        );
      
      case 2:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold">Contact Information</h2>
            <Card>
              <CardContent className="pt-6">
                <form className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={contactForm.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email Address</FormLabel>
                          <FormControl>
                            <Input type="email" placeholder="john.doe@example.com" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={contactForm.control}
                      name="phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Phone Number</FormLabel>
                          <FormControl>
                            <Input type="tel" placeholder="+91 9876543210" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={contactForm.control}
                      name="address"
                      render={({ field }) => (
                        <FormItem className="md:col-span-2">
                          <FormLabel>Address</FormLabel>
                          <FormControl>
                            <Input placeholder="123 Main St" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={contactForm.control}
                      name="city"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>City</FormLabel>
                          <FormControl>
                            <Input placeholder="Mumbai" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={contactForm.control}
                      name="country"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Country</FormLabel>
                          <FormControl>
                            <Input placeholder="India" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={contactForm.control}
                      name="postalCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Postal Code</FormLabel>
                          <FormControl>
                            <Input placeholder="400001" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        );
      
      case 3:
        return (
          <Payment
            onPaymentSubmit={handlePaymentSubmit}
            onBack={prevStep}
            isLoading={isSubmitting}
          />
        );
      
      default:
        return null;
    }
  };

  const handleSubmit = async (data) => {
    try {
      const bookingData = {
        flightId: flight?.id,
        passengers: formData.passengers,
        contactInfo: formData.contactInfo,
        payment: data,
        totalPrice: calculateTotal()
      };
      
      const result = await createBooking(bookingData);
      
      // Navigate to confirmation page on success
      navigate(`/booking/confirmation/success/${result.bookingId}`);
    } catch (error) {
      console.error('Booking error:', error);
      toast({
        title: 'Error',
        description: 'An unexpected error occurred. Please try again.',
        variant: 'destructive',
      });
    }
  };

  // Calculate total price
  const calculateTotal = () => {
    if (!flight) return 0;
    const basePrice = flight.price * passengerCount;
    const taxes = 500 * passengerCount; // Fixed tax per passenger
    return basePrice + taxes;
  };

  // Render booking summary
  const renderBookingSummary = () => {
    if (!flight) return null;
    
    return (
      <Card className="sticky top-6">
        <CardHeader>
          <CardTitle>Booking Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="border-b pb-4">
              <div className="flex justify-between items-center mb-2">
                <h3 className="font-medium">
                  {flight.origin} to {flight.destination}
                </h3>
                <Badge variant="outline">
                  {flight.stops === 0 ? 'Non-stop' : `${flight.stops} stop${flight.stops > 1 ? 's' : ''}`}
                </Badge>
              </div>
              
              <div className="flex items-center justify-between text-sm text-gray-600 mb-1">
                <span>{flight.airline} {flight.flightNumber}</span>
                <span>{flight.duration}</span>
              </div>
              
              <div className="text-sm text-gray-600">
                {format(parseISO(flight.departureTime), 'EEE, MMM d, yyyy')}
              </div>
              
              <div className="mt-3 flex items-center justify-between text-sm">
                <div>
                  <div className="font-medium">{format(parseISO(flight.departureTime), 'h:mm a')}</div>
                  <div className="text-gray-500">{flight.from}</div>
                </div>
                <div className="text-center">
                  <div className="text-xs text-gray-500">
                    {formatDuration(flight.departureTime, flight.arrivalTime)}
                  </div>
                  <div className="h-px w-16 bg-gray-300 my-1"></div>
                  <div className="text-xs text-gray-500">
                    {flight.stops === 0 ? 'Non-stop' : `${flight.stops} stop${flight.stops > 1 ? 's' : ''}`}
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-medium">{format(parseISO(flight.arrivalTime), 'h:mm a')}</div>
                  <div className="text-gray-500">{flight.to}</div>
                </div>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">Base Fare (x{passengerCount})</span>
                <span>₹{(flight.price * passengerCount).toLocaleString('en-IN')}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Taxes & Fees</span>
                <span>₹{(500 * passengerCount).toLocaleString('en-IN')}</span>
              </div>
              <div className="flex justify-between font-medium border-t pt-2 mt-2">
                <span>Total Amount</span>
                <span className="text-lg">
                  ₹{calculateTotal().toLocaleString('en-IN')}
                </span>
              </div>
            </div>
            
            <div className="p-3 bg-green-50 border border-green-100 rounded-md">
              <div className="flex items-start">
                <CheckCircle className="h-5 w-5 text-green-500 mr-2 mt-0.5" />
                <div>
                  <h4 className="font-medium text-green-800">Free Cancellation</h4>
                  <p className="text-sm text-green-600">
                    Cancel within 24 hours for a full refund
                  </p>
                </div>
              </div>
            </div>
            
            <Button 
              className="w-full mt-4" 
              size="lg"
              onClick={onSubmit}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Processing...
                </>
              ) : (
                `Pay ₹${calculateTotal().toLocaleString('en-IN')}`
              )}
            </Button>
            
            <div className="text-center text-xs text-gray-500 mt-2">
              <Shield className="h-3 w-3 inline-block mr-1" />
              Secure SSL Encryption
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  // Render loading state
  if (isFlightLoading || !flight) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-blue-600" />
          <p className="text-gray-600">Loading flight details...</p>
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (isFlightLoading || !flight) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center mb-8">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate(-1)}
              className="mr-2"
            >
              <ArrowLeft className="h-4 w-4 mr-1" />
              Back
            </Button>
            <h1 className="text-2xl font-bold">Complete Your Booking</h1>
          </div>
          <Tabs>
            <TabsContent value="passengers" className="mt-6">
              <div className="mb-6">
                <h2 className="text-xl font-semibold mb-2">Passenger Details</h2>
                <p className="text-gray-600">
                  Please provide the details of the passengers.
                </p>
              </div>
              {bookingData.passengers.map((_, index) => (
                <div key={index} className="relative">
                  {index > 0 && (
                    <div className="absolute -top-3 left-0 right-0 flex items-center">
                      <div className="flex-grow border-t border-gray-200"></div>
                      <span className="px-2 text-sm text-gray-500 bg-white">
                        Passenger {index + 1}
                      </span>
                      <div className="flex-grow border-t border-gray-200"></div>
                    </div>
                  )}
                  <Card key={`passenger-${index}`} className="mb-6">
                    <CardHeader>
                      <CardTitle className="text-lg flex items-center">
                        <User className="h-5 w-5 mr-2" />
                        Passenger {index + 1} {index === 0 && '(Primary Passenger)'}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={passengerForm.control}
                          name="firstName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>First Name *</FormLabel>
                              <FormControl>
                                <Input placeholder="John" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="lastName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Last Name *</FormLabel>
                              <FormControl>
                                <Input placeholder="Doe" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="gender"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Gender *</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select gender" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="male">Male</SelectItem>
                                  <SelectItem value="female">Female</SelectItem>
                                  <SelectItem value="other">Other</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="dateOfBirth"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Date of Birth *</FormLabel>
                              <FormControl>
                                <Input type="date" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="passportNumber"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Passport Number *</FormLabel>
                              <FormControl>
                                <Input placeholder="A1234567" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="passportExpiry"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Passport Expiry Date *</FormLabel>
                              <FormControl>
                                <Input type="date" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="nationality"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Nationality *</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select nationality" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="IN">India</SelectItem>
                                  <SelectItem value="US">United States</SelectItem>
                                  <SelectItem value="GB">United Kingdom</SelectItem>
                                  <SelectItem value="CA">Canada</SelectItem>
                                  <SelectItem value="AU">Australia</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="seatPreference"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Seat Preference</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="No preference" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="window">Window</SelectItem>
                                  <SelectItem value="aisle">Aisle</SelectItem>
                                  <SelectItem value="middle">Middle</SelectItem>
                                  <SelectItem value="none">No preference</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="mealPreference"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Meal Preference</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="No meal" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="vegetarian">Vegetarian</SelectItem>
                                  <SelectItem value="non-vegetarian">Non-Vegetarian</SelectItem>
                                  <SelectItem value="vegan">Vegan</SelectItem>
                                  <SelectItem value="gluten-free">Gluten Free</SelectItem>
                                  <SelectItem value="none">No meal</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={passengerForm.control}
                          name="hasSpecialAssistance"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md p-4 border">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Require special assistance?</FormLabel>
                                <FormDescription>
                                  Check this if you need wheelchair assistance or have any special requirements.
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        {passengerForm.watch('hasSpecialAssistance') && (
                          <FormField
                            control={passengerForm.control}
                            name="specialAssistanceDetails"
                            render={({ field }) => (
                              <FormItem className="md:col-span-2">
                                <FormLabel>Special Assistance Details</FormLabel>
                                <FormControl>
                                  <Input 
                                    placeholder="Please specify your requirements" 
                                    {...field} 
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        )}
                        
                        <div className="md:col-span-2">
                          <Button 
                            type="button" 
                            variant="outline" 
                            onClick={() => setIsSeatMapOpen(!isSeatMapOpen)}
                            className="w-full"
                          >
                            {isSeatMapOpen ? 'Hide Seat Map' : 'Select Seat'}
                          </Button>
                          
                          {isSeatMapOpen && renderSeatMap()}
                          
                          {selectedSeats[`passenger-${index}`] && (
                            <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
                              <p className="text-sm text-green-800">
                                Selected seat: <span className="font-medium">{selectedSeats[`passenger-${index}`]}</span>
                              </p>
                            </div>
                          )}
                        </div>
                        <div className="flex-grow border-t border-gray-200"></div>
                      </div>
                    )}
                    {renderPassengerForm(index)}
                  </div>
                ))}
                
                <div className="flex justify-between mt-8">
                  <Button 
                    variant="outline" 
                    onClick={() => setPassengerCount(prev => Math.max(1, prev - 1))}
                    disabled={passengerCount <= 1}
                  >
                    Remove Passenger
                  </Button>
                  <Button 
                    variant="outline"
                    onClick={() => setPassengerCount(prev => Math.min(9, prev + 1))}
                    disabled={passengerCount >= 9}
                  >
                    Add Passenger
                  </Button>
                </div>
                
                <div className="mt-8 flex justify-end">
                  <Button 
                    onClick={() => {
                      // Validate all passenger forms
                      const validations = passengerForms.map(form => form.trigger());
                      Promise.all(validations).then(results => {
                        if (results.every(valid => valid)) {
                          setActiveTab('contact');
                        } else {
                          toast({
                            title: 'Validation Error',
                            description: 'Please fill in all required fields correctly.',
                            variant: 'destructive',
                          });
                        }
                      });
                    }}
                  >
                    Continue to Contact Details
                  </Button>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="contact" className="mt-6">
              <div className="mb-6">
                <h2 className="text-xl font-semibold mb-2">Contact Information</h2>
                <p className="text-gray-600">
                  We'll use this information to send you booking confirmation and updates.
                </p>
              </div>
              
              {renderContactForm()}
              
              <div className="mt-8 flex justify-between">
                <Button 
                  variant="outline" 
                  onClick={() => setActiveTab('passengers')}
                >
                  Back to Passengers
                </Button>
                <Button 
                  onClick={() => {
                    contactForm.trigger().then(isValid => {
                      if (isValid) {
                        setActiveTab('payment');
                      } else {
                        toast({
                          title: 'Validation Error',
                          description: 'Please fill in all required fields correctly.',
                          variant: 'destructive',
                        });
                      }
                    });
                  }}
                >
                  Continue to Payment
                </Button>
              </div>
            </TabsContent>
            
            <TabsContent value="payment" className="mt-6">
              <div className="mb-6">
                <h2 className="text-xl font-semibold mb-2">Payment Details</h2>
                <p className="text-gray-600">
                  Complete your booking by providing your payment information.
                </p>
              </div>
              
              {renderPaymentForm()}
              
              <div className="mt-8 flex justify-between">
                <Button 
                  variant="outline" 
                  onClick={() => setActiveTab('contact')}
                >
                  Back to Contact
                </Button>
                <Button 
                  onClick={onSubmit}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    'Complete Booking'
                  )}
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </div>
        
        {/* Booking Summary Sidebar */}
        <div className="hidden lg:block">
          {renderBookingSummary()}
        </div>
      </div>
      
      {/* Mobile Booking Summary */}
      <div className="lg:hidden fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg p-4 z-10">
        <div className="flex justify-between items-center">
          <div>
            <div className="font-medium">
              ₹{calculateTotal().toLocaleString('en-IN')}
            </div>
            <div className="text-sm text-gray-500">
              {passengerCount} {passengerCount === 1 ? 'Passenger' : 'Passengers'}
            </div>
          </div>
          <Button 
            className="flex-1 max-w-xs ml-4"
            onClick={onSubmit}
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Processing...
              </>
            ) : (
              'Book Now'
            )}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Booking;
